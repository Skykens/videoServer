// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonProto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonProto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonProto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonProto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonProto_2eproto;
namespace NetWork {
class clientLogin;
class clientLoginDefaultTypeInternal;
extern clientLoginDefaultTypeInternal _clientLogin_default_instance_;
class clientRegister;
class clientRegisterDefaultTypeInternal;
extern clientRegisterDefaultTypeInternal _clientRegister_default_instance_;
class heart;
class heartDefaultTypeInternal;
extern heartDefaultTypeInternal _heart_default_instance_;
class serverLogin;
class serverLoginDefaultTypeInternal;
extern serverLoginDefaultTypeInternal _serverLogin_default_instance_;
class serverRegister;
class serverRegisterDefaultTypeInternal;
extern serverRegisterDefaultTypeInternal _serverRegister_default_instance_;
}  // namespace NetWork
PROTOBUF_NAMESPACE_OPEN
template<> ::NetWork::clientLogin* Arena::CreateMaybeMessage<::NetWork::clientLogin>(Arena*);
template<> ::NetWork::clientRegister* Arena::CreateMaybeMessage<::NetWork::clientRegister>(Arena*);
template<> ::NetWork::heart* Arena::CreateMaybeMessage<::NetWork::heart>(Arena*);
template<> ::NetWork::serverLogin* Arena::CreateMaybeMessage<::NetWork::serverLogin>(Arena*);
template<> ::NetWork::serverRegister* Arena::CreateMaybeMessage<::NetWork::serverRegister>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NetWork {

// ===================================================================

class heart :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetWork.heart) */ {
 public:
  heart();
  virtual ~heart();

  heart(const heart& from);
  heart(heart&& from) noexcept
    : heart() {
    *this = ::std::move(from);
  }

  inline heart& operator=(const heart& from) {
    CopyFrom(from);
    return *this;
  }
  inline heart& operator=(heart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const heart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const heart* internal_default_instance() {
    return reinterpret_cast<const heart*>(
               &_heart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(heart& a, heart& b) {
    a.Swap(&b);
  }
  inline void Swap(heart* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline heart* New() const final {
    return CreateMaybeMessage<heart>(nullptr);
  }

  heart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<heart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const heart& from);
  void MergeFrom(const heart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(heart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetWork.heart";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonProto_2eproto);
    return ::descriptor_table_CommonProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFdFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // optional int32 fd = 1;
  bool has_fd() const;
  private:
  bool _internal_has_fd() const;
  public:
  void clear_fd();
  ::PROTOBUF_NAMESPACE_ID::int32 fd() const;
  void set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fd() const;
  void _internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool flag = 2;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);
  private:
  bool _internal_flag() const;
  void _internal_set_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:NetWork.heart)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 fd_;
  bool flag_;
  friend struct ::TableStruct_CommonProto_2eproto;
};
// -------------------------------------------------------------------

class clientLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetWork.clientLogin) */ {
 public:
  clientLogin();
  virtual ~clientLogin();

  clientLogin(const clientLogin& from);
  clientLogin(clientLogin&& from) noexcept
    : clientLogin() {
    *this = ::std::move(from);
  }

  inline clientLogin& operator=(const clientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline clientLogin& operator=(clientLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const clientLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const clientLogin* internal_default_instance() {
    return reinterpret_cast<const clientLogin*>(
               &_clientLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(clientLogin& a, clientLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(clientLogin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline clientLogin* New() const final {
    return CreateMaybeMessage<clientLogin>(nullptr);
  }

  clientLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<clientLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const clientLogin& from);
  void MergeFrom(const clientLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(clientLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetWork.clientLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonProto_2eproto);
    return ::descriptor_table_CommonProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPswFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string psw = 2;
  bool has_psw() const;
  private:
  bool _internal_has_psw() const;
  public:
  void clear_psw();
  const std::string& psw() const;
  void set_psw(const std::string& value);
  void set_psw(std::string&& value);
  void set_psw(const char* value);
  void set_psw(const char* value, size_t size);
  std::string* mutable_psw();
  std::string* release_psw();
  void set_allocated_psw(std::string* psw);
  private:
  const std::string& _internal_psw() const;
  void _internal_set_psw(const std::string& value);
  std::string* _internal_mutable_psw();
  public:

  // @@protoc_insertion_point(class_scope:NetWork.clientLogin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psw_;
  friend struct ::TableStruct_CommonProto_2eproto;
};
// -------------------------------------------------------------------

class serverLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetWork.serverLogin) */ {
 public:
  serverLogin();
  virtual ~serverLogin();

  serverLogin(const serverLogin& from);
  serverLogin(serverLogin&& from) noexcept
    : serverLogin() {
    *this = ::std::move(from);
  }

  inline serverLogin& operator=(const serverLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline serverLogin& operator=(serverLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const serverLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const serverLogin* internal_default_instance() {
    return reinterpret_cast<const serverLogin*>(
               &_serverLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(serverLogin& a, serverLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(serverLogin* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline serverLogin* New() const final {
    return CreateMaybeMessage<serverLogin>(nullptr);
  }

  serverLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<serverLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const serverLogin& from);
  void MergeFrom(const serverLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(serverLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetWork.serverLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonProto_2eproto);
    return ::descriptor_table_CommonProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // optional int32 userid = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  bool ret() const;
  void set_ret(bool value);
  private:
  bool _internal_ret() const;
  void _internal_set_ret(bool value);
  public:

  // @@protoc_insertion_point(class_scope:NetWork.serverLogin)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  bool ret_;
  friend struct ::TableStruct_CommonProto_2eproto;
};
// -------------------------------------------------------------------

class clientRegister :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetWork.clientRegister) */ {
 public:
  clientRegister();
  virtual ~clientRegister();

  clientRegister(const clientRegister& from);
  clientRegister(clientRegister&& from) noexcept
    : clientRegister() {
    *this = ::std::move(from);
  }

  inline clientRegister& operator=(const clientRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline clientRegister& operator=(clientRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const clientRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const clientRegister* internal_default_instance() {
    return reinterpret_cast<const clientRegister*>(
               &_clientRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(clientRegister& a, clientRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(clientRegister* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline clientRegister* New() const final {
    return CreateMaybeMessage<clientRegister>(nullptr);
  }

  clientRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<clientRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const clientRegister& from);
  void MergeFrom(const clientRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(clientRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetWork.clientRegister";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonProto_2eproto);
    return ::descriptor_table_CommonProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPswFieldNumber = 2,
    kPswQuestionFieldNumber = 3,
    kPswAnswerFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string psw = 2;
  bool has_psw() const;
  private:
  bool _internal_has_psw() const;
  public:
  void clear_psw();
  const std::string& psw() const;
  void set_psw(const std::string& value);
  void set_psw(std::string&& value);
  void set_psw(const char* value);
  void set_psw(const char* value, size_t size);
  std::string* mutable_psw();
  std::string* release_psw();
  void set_allocated_psw(std::string* psw);
  private:
  const std::string& _internal_psw() const;
  void _internal_set_psw(const std::string& value);
  std::string* _internal_mutable_psw();
  public:

  // optional string psw_question = 3;
  bool has_psw_question() const;
  private:
  bool _internal_has_psw_question() const;
  public:
  void clear_psw_question();
  const std::string& psw_question() const;
  void set_psw_question(const std::string& value);
  void set_psw_question(std::string&& value);
  void set_psw_question(const char* value);
  void set_psw_question(const char* value, size_t size);
  std::string* mutable_psw_question();
  std::string* release_psw_question();
  void set_allocated_psw_question(std::string* psw_question);
  private:
  const std::string& _internal_psw_question() const;
  void _internal_set_psw_question(const std::string& value);
  std::string* _internal_mutable_psw_question();
  public:

  // optional string psw_answer = 4;
  bool has_psw_answer() const;
  private:
  bool _internal_has_psw_answer() const;
  public:
  void clear_psw_answer();
  const std::string& psw_answer() const;
  void set_psw_answer(const std::string& value);
  void set_psw_answer(std::string&& value);
  void set_psw_answer(const char* value);
  void set_psw_answer(const char* value, size_t size);
  std::string* mutable_psw_answer();
  std::string* release_psw_answer();
  void set_allocated_psw_answer(std::string* psw_answer);
  private:
  const std::string& _internal_psw_answer() const;
  void _internal_set_psw_answer(const std::string& value);
  std::string* _internal_mutable_psw_answer();
  public:

  // @@protoc_insertion_point(class_scope:NetWork.clientRegister)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psw_question_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psw_answer_;
  friend struct ::TableStruct_CommonProto_2eproto;
};
// -------------------------------------------------------------------

class serverRegister :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NetWork.serverRegister) */ {
 public:
  serverRegister();
  virtual ~serverRegister();

  serverRegister(const serverRegister& from);
  serverRegister(serverRegister&& from) noexcept
    : serverRegister() {
    *this = ::std::move(from);
  }

  inline serverRegister& operator=(const serverRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline serverRegister& operator=(serverRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const serverRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const serverRegister* internal_default_instance() {
    return reinterpret_cast<const serverRegister*>(
               &_serverRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(serverRegister& a, serverRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(serverRegister* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline serverRegister* New() const final {
    return CreateMaybeMessage<serverRegister>(nullptr);
  }

  serverRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<serverRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const serverRegister& from);
  void MergeFrom(const serverRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(serverRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NetWork.serverRegister";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CommonProto_2eproto);
    return ::descriptor_table_CommonProto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kRetFieldNumber = 2,
  };
  // optional int32 userid = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool ret = 2;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  bool ret() const;
  void set_ret(bool value);
  private:
  bool _internal_ret() const;
  void _internal_set_ret(bool value);
  public:

  // @@protoc_insertion_point(class_scope:NetWork.serverRegister)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  bool ret_;
  friend struct ::TableStruct_CommonProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// heart

// optional int32 fd = 1;
inline bool heart::_internal_has_fd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool heart::has_fd() const {
  return _internal_has_fd();
}
inline void heart::clear_fd() {
  fd_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 heart::_internal_fd() const {
  return fd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 heart::fd() const {
  // @@protoc_insertion_point(field_get:NetWork.heart.fd)
  return _internal_fd();
}
inline void heart::_internal_set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  fd_ = value;
}
inline void heart::set_fd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fd(value);
  // @@protoc_insertion_point(field_set:NetWork.heart.fd)
}

// optional bool flag = 2;
inline bool heart::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool heart::has_flag() const {
  return _internal_has_flag();
}
inline void heart::clear_flag() {
  flag_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool heart::_internal_flag() const {
  return flag_;
}
inline bool heart::flag() const {
  // @@protoc_insertion_point(field_get:NetWork.heart.flag)
  return _internal_flag();
}
inline void heart::_internal_set_flag(bool value) {
  _has_bits_[0] |= 0x00000002u;
  flag_ = value;
}
inline void heart::set_flag(bool value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:NetWork.heart.flag)
}

// -------------------------------------------------------------------

// clientLogin

// optional string name = 1;
inline bool clientLogin::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool clientLogin::has_name() const {
  return _internal_has_name();
}
inline void clientLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& clientLogin::name() const {
  // @@protoc_insertion_point(field_get:NetWork.clientLogin.name)
  return _internal_name();
}
inline void clientLogin::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NetWork.clientLogin.name)
}
inline std::string* clientLogin::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NetWork.clientLogin.name)
  return _internal_mutable_name();
}
inline const std::string& clientLogin::_internal_name() const {
  return name_.GetNoArena();
}
inline void clientLogin::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void clientLogin::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetWork.clientLogin.name)
}
inline void clientLogin::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetWork.clientLogin.name)
}
inline void clientLogin::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetWork.clientLogin.name)
}
inline std::string* clientLogin::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* clientLogin::release_name() {
  // @@protoc_insertion_point(field_release:NetWork.clientLogin.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void clientLogin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetWork.clientLogin.name)
}

// optional string psw = 2;
inline bool clientLogin::_internal_has_psw() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool clientLogin::has_psw() const {
  return _internal_has_psw();
}
inline void clientLogin::clear_psw() {
  psw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& clientLogin::psw() const {
  // @@protoc_insertion_point(field_get:NetWork.clientLogin.psw)
  return _internal_psw();
}
inline void clientLogin::set_psw(const std::string& value) {
  _internal_set_psw(value);
  // @@protoc_insertion_point(field_set:NetWork.clientLogin.psw)
}
inline std::string* clientLogin::mutable_psw() {
  // @@protoc_insertion_point(field_mutable:NetWork.clientLogin.psw)
  return _internal_mutable_psw();
}
inline const std::string& clientLogin::_internal_psw() const {
  return psw_.GetNoArena();
}
inline void clientLogin::_internal_set_psw(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void clientLogin::set_psw(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  psw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetWork.clientLogin.psw)
}
inline void clientLogin::set_psw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetWork.clientLogin.psw)
}
inline void clientLogin::set_psw(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetWork.clientLogin.psw)
}
inline std::string* clientLogin::_internal_mutable_psw() {
  _has_bits_[0] |= 0x00000002u;
  return psw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* clientLogin::release_psw() {
  // @@protoc_insertion_point(field_release:NetWork.clientLogin.psw)
  if (!_internal_has_psw()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return psw_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void clientLogin::set_allocated_psw(std::string* psw) {
  if (psw != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  psw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psw);
  // @@protoc_insertion_point(field_set_allocated:NetWork.clientLogin.psw)
}

// -------------------------------------------------------------------

// serverLogin

// optional int32 userid = 1;
inline bool serverLogin::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool serverLogin::has_userid() const {
  return _internal_has_userid();
}
inline void serverLogin::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 serverLogin::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 serverLogin::userid() const {
  // @@protoc_insertion_point(field_get:NetWork.serverLogin.userid)
  return _internal_userid();
}
inline void serverLogin::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
}
inline void serverLogin::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:NetWork.serverLogin.userid)
}

// optional bool ret = 2;
inline bool serverLogin::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool serverLogin::has_ret() const {
  return _internal_has_ret();
}
inline void serverLogin::clear_ret() {
  ret_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool serverLogin::_internal_ret() const {
  return ret_;
}
inline bool serverLogin::ret() const {
  // @@protoc_insertion_point(field_get:NetWork.serverLogin.ret)
  return _internal_ret();
}
inline void serverLogin::_internal_set_ret(bool value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void serverLogin::set_ret(bool value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:NetWork.serverLogin.ret)
}

// -------------------------------------------------------------------

// clientRegister

// optional string name = 1;
inline bool clientRegister::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool clientRegister::has_name() const {
  return _internal_has_name();
}
inline void clientRegister::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& clientRegister::name() const {
  // @@protoc_insertion_point(field_get:NetWork.clientRegister.name)
  return _internal_name();
}
inline void clientRegister::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NetWork.clientRegister.name)
}
inline std::string* clientRegister::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NetWork.clientRegister.name)
  return _internal_mutable_name();
}
inline const std::string& clientRegister::_internal_name() const {
  return name_.GetNoArena();
}
inline void clientRegister::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void clientRegister::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetWork.clientRegister.name)
}
inline void clientRegister::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetWork.clientRegister.name)
}
inline void clientRegister::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetWork.clientRegister.name)
}
inline std::string* clientRegister::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* clientRegister::release_name() {
  // @@protoc_insertion_point(field_release:NetWork.clientRegister.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void clientRegister::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NetWork.clientRegister.name)
}

// optional string psw = 2;
inline bool clientRegister::_internal_has_psw() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool clientRegister::has_psw() const {
  return _internal_has_psw();
}
inline void clientRegister::clear_psw() {
  psw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& clientRegister::psw() const {
  // @@protoc_insertion_point(field_get:NetWork.clientRegister.psw)
  return _internal_psw();
}
inline void clientRegister::set_psw(const std::string& value) {
  _internal_set_psw(value);
  // @@protoc_insertion_point(field_set:NetWork.clientRegister.psw)
}
inline std::string* clientRegister::mutable_psw() {
  // @@protoc_insertion_point(field_mutable:NetWork.clientRegister.psw)
  return _internal_mutable_psw();
}
inline const std::string& clientRegister::_internal_psw() const {
  return psw_.GetNoArena();
}
inline void clientRegister::_internal_set_psw(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void clientRegister::set_psw(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  psw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetWork.clientRegister.psw)
}
inline void clientRegister::set_psw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetWork.clientRegister.psw)
}
inline void clientRegister::set_psw(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  psw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetWork.clientRegister.psw)
}
inline std::string* clientRegister::_internal_mutable_psw() {
  _has_bits_[0] |= 0x00000002u;
  return psw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* clientRegister::release_psw() {
  // @@protoc_insertion_point(field_release:NetWork.clientRegister.psw)
  if (!_internal_has_psw()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return psw_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void clientRegister::set_allocated_psw(std::string* psw) {
  if (psw != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  psw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psw);
  // @@protoc_insertion_point(field_set_allocated:NetWork.clientRegister.psw)
}

// optional string psw_question = 3;
inline bool clientRegister::_internal_has_psw_question() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool clientRegister::has_psw_question() const {
  return _internal_has_psw_question();
}
inline void clientRegister::clear_psw_question() {
  psw_question_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& clientRegister::psw_question() const {
  // @@protoc_insertion_point(field_get:NetWork.clientRegister.psw_question)
  return _internal_psw_question();
}
inline void clientRegister::set_psw_question(const std::string& value) {
  _internal_set_psw_question(value);
  // @@protoc_insertion_point(field_set:NetWork.clientRegister.psw_question)
}
inline std::string* clientRegister::mutable_psw_question() {
  // @@protoc_insertion_point(field_mutable:NetWork.clientRegister.psw_question)
  return _internal_mutable_psw_question();
}
inline const std::string& clientRegister::_internal_psw_question() const {
  return psw_question_.GetNoArena();
}
inline void clientRegister::_internal_set_psw_question(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  psw_question_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void clientRegister::set_psw_question(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  psw_question_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetWork.clientRegister.psw_question)
}
inline void clientRegister::set_psw_question(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  psw_question_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetWork.clientRegister.psw_question)
}
inline void clientRegister::set_psw_question(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  psw_question_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetWork.clientRegister.psw_question)
}
inline std::string* clientRegister::_internal_mutable_psw_question() {
  _has_bits_[0] |= 0x00000004u;
  return psw_question_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* clientRegister::release_psw_question() {
  // @@protoc_insertion_point(field_release:NetWork.clientRegister.psw_question)
  if (!_internal_has_psw_question()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return psw_question_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void clientRegister::set_allocated_psw_question(std::string* psw_question) {
  if (psw_question != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  psw_question_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psw_question);
  // @@protoc_insertion_point(field_set_allocated:NetWork.clientRegister.psw_question)
}

// optional string psw_answer = 4;
inline bool clientRegister::_internal_has_psw_answer() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool clientRegister::has_psw_answer() const {
  return _internal_has_psw_answer();
}
inline void clientRegister::clear_psw_answer() {
  psw_answer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& clientRegister::psw_answer() const {
  // @@protoc_insertion_point(field_get:NetWork.clientRegister.psw_answer)
  return _internal_psw_answer();
}
inline void clientRegister::set_psw_answer(const std::string& value) {
  _internal_set_psw_answer(value);
  // @@protoc_insertion_point(field_set:NetWork.clientRegister.psw_answer)
}
inline std::string* clientRegister::mutable_psw_answer() {
  // @@protoc_insertion_point(field_mutable:NetWork.clientRegister.psw_answer)
  return _internal_mutable_psw_answer();
}
inline const std::string& clientRegister::_internal_psw_answer() const {
  return psw_answer_.GetNoArena();
}
inline void clientRegister::_internal_set_psw_answer(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  psw_answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void clientRegister::set_psw_answer(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  psw_answer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NetWork.clientRegister.psw_answer)
}
inline void clientRegister::set_psw_answer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  psw_answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NetWork.clientRegister.psw_answer)
}
inline void clientRegister::set_psw_answer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  psw_answer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NetWork.clientRegister.psw_answer)
}
inline std::string* clientRegister::_internal_mutable_psw_answer() {
  _has_bits_[0] |= 0x00000008u;
  return psw_answer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* clientRegister::release_psw_answer() {
  // @@protoc_insertion_point(field_release:NetWork.clientRegister.psw_answer)
  if (!_internal_has_psw_answer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return psw_answer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void clientRegister::set_allocated_psw_answer(std::string* psw_answer) {
  if (psw_answer != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  psw_answer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psw_answer);
  // @@protoc_insertion_point(field_set_allocated:NetWork.clientRegister.psw_answer)
}

// -------------------------------------------------------------------

// serverRegister

// optional int32 userid = 1;
inline bool serverRegister::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool serverRegister::has_userid() const {
  return _internal_has_userid();
}
inline void serverRegister::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 serverRegister::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 serverRegister::userid() const {
  // @@protoc_insertion_point(field_get:NetWork.serverRegister.userid)
  return _internal_userid();
}
inline void serverRegister::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  userid_ = value;
}
inline void serverRegister::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:NetWork.serverRegister.userid)
}

// optional bool ret = 2;
inline bool serverRegister::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool serverRegister::has_ret() const {
  return _internal_has_ret();
}
inline void serverRegister::clear_ret() {
  ret_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool serverRegister::_internal_ret() const {
  return ret_;
}
inline bool serverRegister::ret() const {
  // @@protoc_insertion_point(field_get:NetWork.serverRegister.ret)
  return _internal_ret();
}
inline void serverRegister::_internal_set_ret(bool value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void serverRegister::set_ret(bool value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:NetWork.serverRegister.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NetWork

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonProto_2eproto
